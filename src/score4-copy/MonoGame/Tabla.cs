using System;

namespace Score4AI
{
    public struct Tabla
    {
        //Podaci: 64 bit oznacava gde se nalaze loptice
        // AAAA BBBB CCCC DDDD EEEE .....
        // AAAA = 0 kvadrant, BBBB = 1 kvadrant
        // 1 = ima lopticu, 0 = nema lopticu
        //Igrac: 64 bit oznacava koj igrac je postavio lopticu
        //0 = igrac1 , 1 = igrac2
        private Tabla(ulong data, ulong player)
        {
            Podaci = data;
            Igrac = player;
        }

        public readonly ulong Podaci;
        public readonly ulong Igrac;

        public bool Puna => Podaci == 0xFFFFFFFFFFFFFFFF;

        public bool PopunjenKvadrant(int kvadrant) => LopticaUKvadrantu(kvadrant) == 4;
        public int LopticaUKvadrantu(int kvadrant)
        {
            var index = kvadrant * 4;
            var kvadrantData = (byte)((Podaci >> index) & 0b1111); //c# reprezentacija 4 pozitivna bita tojest hex 0xF
            return kvadrantData switch  //c#8 switch return sintaxa  broj1 => broj2 isto je i sto case broj1: return broj2;
            {
                0b1111 => 4,
                0b0111 => 3,
                0b0011 => 2,
                0b0001 => 1,
                0b0000 => 0,
                _ => throw new Exception($"Nepravilan Kvadrant: {kvadrant}"), //default case
            };
        }

        public Tabla DodajPotez(int kvadrant, bool igrac2)
        {
            var filledBalls = LopticaUKvadrantu(kvadrant);
            if (filledBalls == 4)
                throw new Exception($"Popunjen Kvadrant: {kvadrant}");
            var index = kvadrant * 4 + filledBalls;
            var newData = (ulong)0b1 << index;
            var data = Podaci | newData;
            var player = Igrac;
            if (igrac2)
                player |= newData;
            return new Tabla(data, player);
        }

        public (int poeniPlayer1, int poeniPlayer2) IzracunajPoene()
        {
            var poeniPlayer1 = 0;
            var poeniPlayer2 = 0;
            foreach (var dobitniPotez in DobitniPotezi)
            {
                if ((Podaci & dobitniPotez) != dobitniPotez)
                    continue;
                if ((Igrac & dobitniPotez) == dobitniPotez)
                    poeniPlayer2++;
                else if ((Igrac & dobitniPotez) == 0)
                    poeniPlayer1++;
            }
            return (poeniPlayer1, poeniPlayer2);
        }

        public static ulong[] DobitniPotezi = new ulong[]
        {
            //Kvadranti
            0b1111,
            0b11110000,
            0b111100000000,
            0b1111000000000000,
            0b11110000000000000000,
            0b111100000000000000000000,
            0b1111000000000000000000000000,
            0b11110000000000000000000000000000,
            0b111100000000000000000000000000000000,
            0b1111000000000000000000000000000000000000,
            0b11110000000000000000000000000000000000000000,
            0b111100000000000000000000000000000000000000000000,
            0b1111000000000000000000000000000000000000000000000000,
            0b11110000000000000000000000000000000000000000000000000000,
            0b111100000000000000000000000000000000000000000000000000000000,
            0b1111000000000000000000000000000000000000000000000000000000000000,

            //2D Baze
             //vertikalne
            0b1000100010001,
            0b10001000100010000000000000000,
            0b100010001000100000000000000000000000000000000,
            0b1000100010001000000000000000000000000000000000000000000000000,
             //horizontale
            0b1000000000000000100000000000000010000000000000001,
            0b10000000000000001000000000000000100000000000000010000,
            0b100000000000000010000000000000001000000000000000100000000,
            0b1000000000000000100000000000000010000000000000001000000000000,
             //dijagonale
            0b1000000000000000000010000000000000000000100000000000000000001,
            0b1000000000001000000000001000000000001000000000000,
             //vertikalne
            0b10001000100010,
            0b100010001000100000000000000000,
            0b1000100010001000000000000000000000000000000000,
            0b10001000100010000000000000000000000000000000000000000000000000,
             //horizontale
            0b10000000000000001000000000000000100000000000000010,
            0b100000000000000010000000000000001000000000000000100000,
            0b1000000000000000100000000000000010000000000000001000000000,
            0b10000000000000001000000000000000100000000000000010000000000000,
             //dijagonale
            0b10000000000000000000100000000000000000001000000000000000000010,
            0b10000000000010000000000010000000000010000000000000,
             //vertikalne
            0b100010001000100,
            0b1000100010001000000000000000000,
            0b10001000100010000000000000000000000000000000000,
            0b100010001000100000000000000000000000000000000000000000000000000,
             //horizontale
            0b100000000000000010000000000000001000000000000000100,
            0b1000000000000000100000000000000010000000000000001000000,
            0b10000000000000001000000000000000100000000000000010000000000,
            0b100000000000000010000000000000001000000000000000100000000000000,
             //dijagonale
            0b100000000000000000001000000000000000000010000000000000000000100,
            0b100000000000100000000000100000000000100000000000000,
             //vertikalne
            0b1000100010001000,
            0b10001000100010000000000000000000,
            0b100010001000100000000000000000000000000000000000,
            0b1000100010001000000000000000000000000000000000000000000000000000,
             //horizontale
            0b1000000000000000100000000000000010000000000000001000,
            0b10000000000000001000000000000000100000000000000010000000,
            0b100000000000000010000000000000001000000000000000100000000000,
            0b1000000000000000100000000000000010000000000000001000000000000000,
             //dijagonale
            0b1000000000000000000010000000000000000000100000000000000000001000,
            0b1000000000001000000000001000000000001000000000000000,

            //3D Dijagonale
            0b1000000000000000000001000000000000000000001000000000000000000001,
            0b1000000000000000000100000000000000000010000000000000000001000,
            0b1000000000000100000000000010000000000001000000000000,
            0b1000000000010000000000100000000001000000000000000,

            //3D Vertikalne
            0b1000010000100001,
            0b1001001001000,
            0b10000100001000010000000000000000,
            0b10010010010000000000000000000,
            0b100001000010000100000000000000000000000000000000,
            0b100100100100000000000000000000000000000000000,
            0b1000010000100001000000000000000000000000000000000000000000000000,
            0b1001001001000000000000000000000000000000000000000000000000000,
            //3D Horizontale
            0b1000000000000000010000000000000000100000000000000001,
            0b1000000000000001000000000000001000000000000001000,
            0b10000000000000000100000000000000001000000000000000010000,
            0b10000000000000010000000000000010000000000000010000000,
            0b100000000000000001000000000000000010000000000000000100000000,
            0b100000000000000100000000000000100000000000000100000000000,
            0b1000000000000000010000000000000000100000000000000001000000000000,
            0b1000000000000001000000000000001000000000000001000000000000000,
        };
    }
}
